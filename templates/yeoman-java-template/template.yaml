apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: yeoman-java-template
  title: Yeoman Java Template
  description: This is a Template to scaffold applications using Yeoman Java Generator
  tags:
    - yeoman
    - java
    - node
spec:
  owner: backstage
  type: service

  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Enter the project name
          ui:autofocus: true
          ui:options:
            rows: 5
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        appType:
          title: Application Type
          type: string
          description: Select type of artifact in order to generate
          default: micro
          enum:
            - micro
            - soap-service
            - spi-service
            - cron
        microserviceType:
          title: Microservice Type
          type: string
          description: Desired Microservice Type
          default: apifirst
          enum:
            - apifirst
            - codefirst
        persistenceLayer:
          title: Enable Persistence Layer
          description: Enable persistence layer
          type: boolean
          default: false
        feignClient:
          title: Enable Feign Client
          description: Enable @FeignClient in order to invoke other microservices
          type: boolean
          default: false
        jaxws:
          title: Enable JAX-WS for Web Services (SOAP)
          description: Enable JAX-WS and add dependencies needed for invoke WSDL/SOAP external services
          type: boolean
          default: false
        testcontainers:
          title: Enable Test Container
          description: Add dependencies and examples of integration testing with Testcontainer
          type: boolean
          default: true
        cucumberTest:
          title: Enable Cucumber Tests
          description: Experimental option (only add Maven dependencies)
          type: boolean
          default: false
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
              #- bitbucket.org

  steps:
    - id: yeoman
      name: Yeoman
      action: run:yeoman
      input:
        namespace: mauc:app
        args:
          - cli
        options:
          projectName: ${{ parameters.projectName }}
          appType: ${{ parameters.appType }}
          microserviceType: ${{ parameters.microserviceType }}
          persistenceLayer: ${{ parameters.persistenceLayer }}
          feignClient: ${{ parameters.feignClient }}
          jaxws: ${{ parameters.jaxws }}
          testcontainers: ${{ parameters.testcontainers }}
          cucumberTest: ${{ parameters.cucumberTest }}

    - id: catalog-write
      name: Write Catalog
      action: catalog:write
      input:
        filePath: catalog-info.yaml
        entity:
          apiVersion: backstage.io/v1alpha1
          kind: Component
          metadata:
            name: ${{ parameters.name }}
            description: ${{ parameters.name }}
            annotations:
              github.com/project-slug: ${{ (parameters.repoUrl | parseRepoUrl)['owner'] + "/" + (parameters.repoUrl | parseRepoUrl)['repo'] }}
          spec:
            type: service
            owner: ${{ parameters.owner }}
            lifecycle: experimental

    - id: publish
      name: Publish
      action: publish:github
      #action: publish:bitbucket
      input:
        allowedHosts: ["github.com", "bitbucket.org" ]
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}